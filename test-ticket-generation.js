// test-ticket-generation.js
// Placez ce fichier √† la racine de votre projet et ex√©cutez-le avec: node test-ticket-generation.js
require('dotenv').config();
const path = require('path');
const mongoose = require('mongoose');
const fs = require('fs');

// Path to your modules (adjust if needed)
const { generateTicketPDF } = require('./server/utils/generateTicket');
const { sendTicketEmail } = require('./server/utils/emailService');

// Dummy data for testing
const testData = {
  name: "Dupont",
  firstName: "Jean",
  email: process.env.EMAIL_USER || "votre-email@gmail.com", // Utilisez l'email dans .env ou remplacez
  paymentId: "test_payment_" + Date.now(), // ID unique
  category: "earlyBird"
};

// Function to test the entire process
async function testTicketGeneration() {
  console.log("üöÄ Test de g√©n√©ration et envoi de ticket");
  console.log("üìã Donn√©es de test:", testData);

  try {
    // Step 1: Generate PDF ticket
    console.log("\nüìÑ G√©n√©ration du PDF...");
    const ticketData = await generateTicketPDF(
      testData.name,
      testData.firstName,
      testData.email,
      testData.paymentId,
      testData.category
    );
    
    console.log("‚úÖ PDF g√©n√©r√© avec succ√®s:");
    console.log(`- Chemin: ${ticketData.filePath}`);
    console.log(`- QR Code: ${ticketData.qrCodePath}`);
    
    // Check if files exist
    if (fs.existsSync(ticketData.filePath)) {
      const stats = fs.statSync(ticketData.filePath);
      console.log(`- Taille du PDF: ${stats.size} octets`);
    } else {
      console.error("‚ùå ERREUR: Le fichier PDF n'existe pas!");
    }
    
    if (fs.existsSync(ticketData.qrCodePath)) {
      const stats = fs.statSync(ticketData.qrCodePath);
      console.log(`- Taille du QR Code: ${stats.size} octets`);
    } else {
      console.log("‚ÑπÔ∏è Note: Le QR Code n'existe pas comme fichier s√©par√© (il est int√©gr√© dans le PDF)");
    }

    // Step 2: Send email
    console.log("\nüìß Envoi de l'email avec le ticket...");
    const emailResult = await sendTicketEmail(
      testData.email,
      testData.name,
      testData.firstName,
      ticketData
    );
    
    console.log("‚úÖ Email envoy√© avec succ√®s!");
    console.log(`- Destinataire: ${testData.email}`);
    console.log(`- ID Message: ${emailResult.messageId || "Non disponible"}`);
    
    console.log("\nüèÅ Test termin√© avec succ√®s!");
    console.log("V√©rifiez votre bo√Æte de r√©ception (et dossier spam) pour l'email contenant le ticket.");

  } catch (error) {
    console.error("\n‚ùå Erreur pendant le test:");
    console.error(error);
    
    // Give targeted advice based on the error
    if (error.message && error.message.includes('EAUTH')) {
      console.log("\nüîë Probl√®me d'authentification d√©tect√©:");
      console.log("1. V√©rifiez que votre email et mot de passe sont corrects");
      console.log("2. Pour Gmail, activez la validation en 2 √©tapes puis cr√©ez un 'mot de passe d'application'");
      console.log("   √†: https://myaccount.google.com/apppasswords");
    } else if (error.message && error.message.includes('ECONNREFUSED')) {
      console.log("\nüîå Probl√®me de connexion d√©tect√©:");
      console.log("1. V√©rifiez votre connexion internet");
      console.log("2. Assurez-vous que le serveur SMTP n'est pas bloqu√© par un firewall");
    } else if (error.message && error.message.includes('PDF')) {
      console.log("\nüìÑ Probl√®me de g√©n√©ration PDF d√©tect√©:");
      console.log("1. V√©rifiez que les dossiers 'tickets' et 'qrcodes' existent");
      console.log("2. Assurez-vous que l'application a les droits d'√©criture");
      console.log("3. V√©rifiez que les d√©pendances comme 'pdfkit', 'canvas' sont install√©es");
    }
  } finally {
    process.exit(0);
  }
}

// Run the test
testTicketGeneration();