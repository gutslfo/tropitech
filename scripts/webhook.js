// scripts/webhook-test.js
// Script pour tester manuellement le webhook Stripe
require('dotenv').config();
const fetch = require('node-fetch');
const crypto = require('crypto');

// Configuration
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'http://localhost:5000/api/webhook';
const WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET;

// Fonction pour simuler un webhook Stripe
async function simulateWebhook() {
    // Cr√©er un √©v√©nement de test similaire √† ceux envoy√©s par Stripe
    const timestamp = Math.floor(Date.now() / 1000);
    const paymentId = 'pi_' + crypto.randomBytes(24).toString('hex');
    
    // Simuler un √©v√©nement payment_intent.succeeded
    const event = {
        id: 'evt_' + crypto.randomBytes(24).toString('hex'),
        object: 'event',
        api_version: '2020-08-27',
        created: timestamp,
        data: {
            object: {
                id: paymentId,
                object: 'payment_intent',
                amount: 1800, // 18.00 CHF en centimes
                currency: 'chf',
                status: 'succeeded',
                created: timestamp,
                metadata: {
                    customer_name: 'Test',
                    customer_firstName: 'Webhook',
                    customer_email: process.env.EMAIL_USER || 'test@example.com',
                }
            }
        },
        type: 'payment_intent.succeeded',
        livemode: false
    };
    
    // Convertir l'√©v√©nement en JSON
    const payload = JSON.stringify(event);
    
    console.log(`üîÑ Envoi d'un webhook simul√© √† ${WEBHOOK_URL}`);
    console.log(`üîç Type d'√©v√©nement: ${event.type}`);
    console.log(`üÜî Payment Intent ID: ${paymentId}`);
    console.log(`üìß Email: ${event.data.object.metadata.customer_email}`);
    
    // Headers par d√©faut
    const headers = {
        'Content-Type': 'application/json',
    };
    
    // G√©n√©rer une signature si un secret est fourni
    if (WEBHOOK_SECRET) {
        console.log("üîê G√©n√©ration d'une signature avec la cl√© secr√®te...");
        
        const signedPayload = `${timestamp}.${payload}`;
        const signature = crypto
            .createHmac('sha256', WEBHOOK_SECRET)
            .update(signedPayload)
            .digest('hex');
        
        // Ajouter l'en-t√™te signature au format utilis√© par Stripe
        headers['stripe-signature'] = `t=${timestamp},v1=${signature}`;
        console.log('‚úÖ Signature g√©n√©r√©e');
    } else {
        console.log('‚ö†Ô∏è Aucune cl√© secr√®te fournie, webhook envoy√© sans signature');
    }
    
    try {
        // Envoyer la requ√™te
        console.log('üì§ Envoi de la requ√™te...');
        const response = await fetch(WEBHOOK_URL, {
            method: 'POST',
            headers: headers,
            body: payload
        });
        
        // Afficher le r√©sultat
        const responseText = await response.text();
        console.log(`üõ¨ R√©ponse: ${response.status} ${response.statusText}`);
        console.log(`üìÑ Contenu: ${responseText}`);
        
        if (response.ok) {
            console.log('‚úÖ Webhook accept√© par le serveur');
            console.log('\n‚ö†Ô∏è IMPORTANT: V√©rifiez les logs du serveur pour confirmer que le webhook a √©t√© trait√© correctement.');
            console.log('Si le serveur a r√©pondu 200 mais n\'a pas trait√© l\'√©v√©nement, le probl√®me est dans la logique de traitement.');
        } else {
            console.log('‚ùå Webhook rejet√© par le serveur');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi du webhook:', error);
    }
}

// V√©rifier les pr√©requis
if (!process.env.STRIPE_SECRET_KEY) {
    console.error('‚ùå STRIPE_SECRET_KEY n\'est pas d√©finie dans les variables d\'environnement');
    process.exit(1);
}

// Ex√©cuter le test
console.log('üß™ D√âBUT DU TEST DE WEBHOOK STRIPE\n');
simulateWebhook();