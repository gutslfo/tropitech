// server/utils/dbConnect.js - Optimis√© pour MongoDB Atlas
const mongoose = require('mongoose');

// Track connection state
let isConnected = false;
let connectionAttempts = 0;
const MAX_RETRIES = 5;

/**
 * Connect to MongoDB Atlas using a singleton pattern
 * @returns {Promise<typeof mongoose>} Mongoose connection
 */
const dbConnect = async () => {
  // Si d√©j√† connect√©, r√©utiliser la connexion
  if (isConnected) {
    console.log('üìä Utilisation de la connexion MongoDB Atlas existante');
    return mongoose;
  }

  // V√©rifier que MONGO_URI est d√©finie
  if (!process.env.MONGO_URI) {
    throw new Error('MONGO_URI n\'est pas d√©finie dans les variables d\'environnement');
  }

  // V√©rifier si l'URI commence par mongodb+srv:// (Atlas)
  const isAtlas = process.env.MONGO_URI.startsWith('mongodb+srv://');
  console.log(`üîÑ Connexion √† ${isAtlas ? 'MongoDB Atlas' : 'MongoDB'} en cours...`);

  try {
    // Si pas d√©j√† connect√©
    if (mongoose.connection.readyState !== 1) {
      // Options de connexion am√©lior√©es pour Atlas
      const options = {
        serverSelectionTimeoutMS: 10000, // 10s pour la s√©lection du serveur
        socketTimeoutMS: 45000, // 45s timeout pour les op√©rations
        family: 4, // Forcer IPv4
        retryWrites: true,
        w: 'majority', // Garantir que les √©critures sont propag√©es √† la majorit√© des serveurs
      };

      const db = await mongoose.connect(process.env.MONGO_URI, options);
      
      isConnected = true;
      connectionAttempts = 0; // R√©initialiser le compteur apr√®s une connexion r√©ussie
      
      console.log(`‚úÖ Connexion √† ${isAtlas ? 'MongoDB Atlas' : 'MongoDB'} √©tablie avec succ√®s`);
      return db;
    } else {
      console.log('üìä MongoDB d√©j√† connect√©');
      isConnected = true;
      return mongoose;
    }
  } catch (error) {
    // Gestion am√©lior√©e des erreurs de connexion
    connectionAttempts++;
    
    console.error(`‚ùå Erreur de connexion √† MongoDB (tentative ${connectionAttempts}/${MAX_RETRIES}):`, error.message);
    
    // Si l'erreur est li√©e √† la s√©lection du serveur, d√©tailler les probl√®mes possibles
    if (error.name === 'MongooseServerSelectionError') {
      console.error('‚ö†Ô∏è Probl√®mes possibles:');
      console.error('1. V√©rifiez que votre cha√Æne de connexion est correcte');
      console.error('2. V√©rifiez que votre adresse IP est autoris√©e dans Atlas');
      console.error('3. V√©rifiez que les identifiants sont corrects');
      console.error('4. V√©rifiez que le cluster Atlas est en ligne');
    }
    
    // Si nombre maximal de tentatives non atteint, r√©essayer
    if (connectionAttempts < MAX_RETRIES) {
      console.log(`‚è±Ô∏è Nouvelle tentative dans ${connectionAttempts * 3} secondes...`);
      await new Promise(resolve => setTimeout(resolve, connectionAttempts * 3000));
      return dbConnect(); // R√©cursion pour r√©essayer
    }
    
    throw error; // Si max atteint, propager l'erreur
  }
};

// Exposer fonction pour v√©rifier l'√©tat de connexion
dbConnect.isConnected = () => {
  return mongoose.connection.readyState === 1;
};

// Gestion am√©lior√©e des √©v√©nements de connexion
mongoose.connection.on('connected', () => {
  console.log('üü¢ Mongoose connect√© √† MongoDB Atlas');
  isConnected = true;
});

mongoose.connection.on('error', (err) => {
  console.error('üî¥ Erreur de connexion Mongoose:', err.message);
  isConnected = false;
});

mongoose.connection.on('disconnected', () => {
  console.log('üü† Mongoose d√©connect√© de MongoDB Atlas');
  isConnected = false;
});

// Gestion des reconnexions en cas de d√©connexion inattendue
mongoose.connection.on('disconnected', async () => {
  if (!isConnected) return; // √âviter les tentatives de reconnexion redondantes
  
  console.log('üîÑ Tentative de reconnexion √† MongoDB Atlas...');
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Reconnexion √† MongoDB Atlas r√©ussie');
    isConnected = true;
  } catch (error) {
    console.error('‚ùå √âchec de reconnexion √† MongoDB Atlas:', error.message);
    isConnected = false;
  }
});

// Gestion propre de la terminaison du processus
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('MongoDB Atlas d√©connect√© proprement suite √† l\'arr√™t de l\'application');
    process.exit(0);
  } catch (err) {
    console.error('Erreur lors de la fermeture de la connexion MongoDB:', err);
    process.exit(1);
  }
});

module.exports = dbConnect;