// server/routes/webhookRoutes.js
const express = require("express");
const router = express.Router();
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const User = require("../models/User");
const Ticket = require("../models/ticket");
const { generateTicketPDF } = require("../utils/generateTicket");
const { sendTicketEmail } = require("../utils/emailService");
const fs = require("fs");
const path = require("path");

// V√©rification et cr√©ation des dossiers n√©cessaires
const dirs = [
  path.join(__dirname, '..', 'tickets'),
  path.join(__dirname, '..', 'qrcodes'),
  path.join(__dirname, '..', 'assets')
];

dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`‚úÖ Dossier cr√©√©: ${dir}`);
  }
});

// Middleware pour les webhooks Stripe - utilise le corps brut
router.post("/", express.raw({ type: 'application/json' }), async (req, res) => {
    console.log("üì© Webhook Stripe re√ßu !");
    console.log("Headers:", JSON.stringify(req.headers));
    
    // R√©cup√©rer le corps de la requ√™te en tant que Buffer
    const payload = req.body;
    const sig = req.headers['stripe-signature'];
    let event;

    try {
        // V√©rifier si nous avons le corps et la signature
        if (!payload) {
            console.error("‚ùå Webhook error: Payload vide ou manquant");
            return res.status(400).send("Webhook Error: Missing payload");
        }

        // Log pour le debugging
        console.log(`üì¶ Payload re√ßu (Buffer): ${Buffer.isBuffer(payload)}, Taille: ${payload.length} bytes`);
        console.log(`üîë Signature pr√©sente: ${!!sig}`);
        console.log(`üîí Secret configur√©: ${!!process.env.STRIPE_WEBHOOK_SECRET}`);

        // V√©rifier la signature
        if (process.env.STRIPE_WEBHOOK_SECRET && sig) {
            try {
                event = stripe.webhooks.constructEvent(
                    payload, 
                    sig, 
                    process.env.STRIPE_WEBHOOK_SECRET
                );
                console.log(`‚úÖ Signature Stripe v√©rifi√©e`);
            } catch (signatureError) {
                console.error(`‚ùå Erreur de signature webhook: ${signatureError.message}`);
                return res.status(400).send(`Webhook Signature Error: ${signatureError.message}`);
            }
        } else {
            // En d√©veloppement uniquement, on peut accepter sans signature
            try {
                event = JSON.parse(payload.toString());
                console.log(`‚ö†Ô∏è Webhook sans v√©rification de signature (d√©veloppement uniquement)`);
            } catch (parseError) {
                console.error(`‚ùå Erreur de parsing JSON:`, parseError);
                return res.status(400).send(`Webhook Error: Invalid JSON payload`);
            }
        }

        console.log(`‚úÖ Type d'√©v√©nement: ${event.type}`);

        // Traiter l'√©v√©nement
        if (event.type === 'payment_intent.succeeded') {
            await handlePaymentIntentSucceeded(event.data.object);
            return res.status(200).send('Webhook handled: payment_intent.succeeded');
        } else if (event.type === 'payment_intent.payment_failed') {
            await handlePaymentIntentFailed(event.data.object);
            return res.status(200).send('Webhook handled: payment_intent.payment_failed');
        } else {
            console.log(`‚ÑπÔ∏è √âv√©nement non trait√©: ${event.type}`);
            return res.status(200).send(`Webhook received: ${event.type}`);
        }
    } catch (error) {
        console.error(`‚ùå Erreur webhook: ${error.message}`);
        console.error(error.stack);
        // Envoyer un 200 pour √©viter que Stripe ne r√©essaie
        return res.status(200).send(`Webhook Error: ${error.message}`);
    }
});

/**
 * Gestion d'un paiement r√©ussi avec journalisation d√©taill√©e
 * @param {Object} paymentIntent - Objet PaymentIntent de Stripe
 */
async function handlePaymentIntentSucceeded(paymentIntent) {
    console.log(`‚úÖ Paiement r√©ussi! ID: ${paymentIntent.id}`);
    console.log(`üìù Flux d'ex√©cution d√©but: ${new Date().toISOString()}`);

    try {
        // R√©cup√©rer l'utilisateur
        console.log(`üîç Recherche de l'utilisateur pour paymentId: ${paymentIntent.id}`);
        let user = await User.findOne({ paymentId: paymentIntent.id });

        // Si aucun utilisateur n'est trouv√©, essayer de le cr√©er √† partir des m√©tadonn√©es
        if (!user && paymentIntent.metadata) {
            console.log(`‚ö†Ô∏è Aucun utilisateur trouv√© pour paymentId=${paymentIntent.id}. Tentative de r√©cup√©ration depuis les m√©tadonn√©es...`);
            console.log(`üìã M√©tadonn√©es disponibles:`, paymentIntent.metadata);
            
            const { customer_name, customer_firstName, customer_email } = paymentIntent.metadata;
            
            if (customer_email) {
                console.log(`üìù Cr√©ation d'un nouvel utilisateur √† partir des m√©tadonn√©es...`);
                user = new User({
                    email: customer_email || paymentIntent.receipt_email || "no-email@example.com",
                    name: customer_name || "Utilisateur",
                    firstName: customer_firstName || "Anonyme",
                    paymentId: paymentIntent.id,
                    imageConsent: true // Par d√©faut
                });
                
                await user.save();
                console.log(`‚úÖ Utilisateur cr√©√© depuis les m√©tadonn√©es: ${user.email}`);
            } else {
                console.log(`‚ö†Ô∏è Impossible de cr√©er l'utilisateur: m√©tadonn√©es insuffisantes`);
                // Debug: afficher toutes les m√©tadonn√©es disponibles
                console.log('M√©tadonn√©es Stripe disponibles:', JSON.stringify(paymentIntent));
                return;
            }
        } else if (user) {
            console.log(`‚úÖ Utilisateur trouv√©: ${user.email}`);
        } else {
            console.error(`‚ùå Utilisateur non trouv√© pour le paiement: ${paymentIntent.id}`);
            return;
        }

        // V√©rifier si un ticket existe d√©j√† pour ce paiement
        console.log(`üîç V√©rification si un ticket existe d√©j√†...`);
        const existingTicket = await Ticket.findOne({ paymentId: paymentIntent.id });
        if (existingTicket) {
            console.log(`‚ÑπÔ∏è Ticket d√©j√† existant pour: ${paymentIntent.id}`);
            return;
        }

        // D√©terminer la cat√©gorie en fonction du nombre de tickets vendus
        console.log(`üî¢ Calcul de la cat√©gorie...`);
        const ticketCount = await Ticket.countDocuments();
        let category = "thirdRelease"; // Par d√©faut
        
        if (ticketCount < 30) {
            category = "earlyBird";
        } else if (ticketCount < 90) {
            category = "secondRelease";
        }

        console.log(`‚úÖ Cat√©gorie d√©termin√©e: ${category} (${ticketCount} tickets vendus)`);

        // Cr√©er le nouveau ticket en BDD
        console.log(`üìù Cr√©ation du ticket pour ${user.email} avec cat√©gorie ${category}`);
        const ticket = new Ticket({
            paymentId: paymentIntent.id,
            email: user.email,
            name: user.name,
            firstName: user.firstName,
            category,
            imageConsent: user.imageConsent
        });
        
        await ticket.save();
        console.log(`‚úÖ Ticket cr√©√© en base pour: ${user.email} (ID: ${ticket._id})`);

        // G√©n√©ration du PDF avec QR Code
        try {
            console.log(`üîÑ G√©n√©ration du PDF en cours...`);
            const ticketData = await generateTicketPDF(
                user.name,
                user.firstName,
                user.email,
                paymentIntent.id,
                category
            );
            
            console.log(`‚úÖ PDF g√©n√©r√© avec succ√®s: ${ticketData.filePath}`);
            
            // V√©rifier que le fichier existe
            if (fs.existsSync(ticketData.filePath)) {
                console.log(`‚úÖ Fichier PDF v√©rifi√©: ${ticketData.filePath} (${fs.statSync(ticketData.filePath).size} bytes)`);
                
                try {
                    const stats = fs.statSync(ticketData.filePath);
                    console.log(`- Taille: ${stats.size} octets`);
                    console.log(`- Cr√©√© le: ${stats.birthtime}`);
                    console.log(`- Permissions: ${stats.mode.toString(8)}`);
                } catch (statError) {
                    console.error(`‚ùå Erreur lors de la v√©rification du fichier:`, statError);
                }
            } else {
                throw new Error(`Le fichier PDF n'existe pas apr√®s g√©n√©ration: ${ticketData.filePath}`);
            }
            
            // Test de la configuration email avant envoi
            try {
                console.log(`üîÑ Test de la connexion email avant envoi...`);
                const nodemailer = require("nodemailer");
                
                // Cr√©er un transporteur de test
                const testTransporter = nodemailer.createTransport({
                    host: "smtp.gmail.com",
                    port: 465,
                    secure: true,
                    auth: {
                        user: process.env.EMAIL_USER,
                        pass: process.env.EMAIL_PASS,
                    }
                });
                
                await testTransporter.verify();
                console.log(`‚úÖ Test de connexion email r√©ussi`);
            } catch (testError) {
                console.error(`‚ùå Erreur lors du test de connexion email:`, testError);
                // Continuer malgr√© l'erreur pour essayer d'envoyer l'email
            }
            
            // Envoyer l'email avec le billet
            console.log(`üìß Envoi de l'email √† ${user.email}...`);
            const emailResult = await sendTicketEmail(
                user.email,
                user.name,
                user.firstName,
                ticketData
            );
            
            console.log(`‚úÖ Email envoy√© √†: ${user.email}`, emailResult ? `(ID: ${emailResult.messageId})` : '');
        } catch (error) {
            console.error(`‚ùå Erreur g√©n√©ration/envoi du ticket: ${error.message}`);
            console.error(error.stack);
            // M√™me si l'envoi √©choue, on ne veut pas perdre le ticket qui a √©t√© cr√©√©
        }
        
        console.log(`üìù Flux d'ex√©cution termin√©: ${new Date().toISOString()}`);
    } catch (error) {
        console.error(`‚ùå Erreur traitement paiement r√©ussi: ${error.message}`);
        console.error(error.stack);
    }
}

/**
 * Gestion d'un paiement √©chou√©
 * @param {Object} paymentIntent - Objet PaymentIntent de Stripe
 */
async function handlePaymentIntentFailed(paymentIntent) {
    console.log(`‚ö†Ô∏è Paiement √©chou√©! ID: ${paymentIntent.id}`);

    try {
        const user = await User.findOne({ paymentId: paymentIntent.id });
        if (!user) {
            console.error(`‚ùå Utilisateur non trouv√© pour le paiement √©chou√©: ${paymentIntent.id}`);
            return;
        }
        
        console.log(`‚ÑπÔ∏è Paiement √©chou√© pour: ${user.email}`);
        // Vous pourriez envoyer un email d'√©chec ici si n√©cessaire
    } catch (error) {
        console.error(`‚ùå Erreur traitement paiement √©chou√©: ${error.message}`);
        console.error(error.stack);
    }
}

// Route de test pour webhook
router.post("/test", express.raw({ type: 'application/json' }), (req, res) => {
    console.log("Test webhook re√ßu!");
    console.log("Type de req.body:", typeof req.body);
    console.log("Est-ce un Buffer?", Buffer.isBuffer(req.body));
    
    // Si c'est un Buffer, tout va bien
    if (Buffer.isBuffer(req.body)) {
        const payload = req.body.toString();
        console.log("Payload (premiers 100 caract√®res):", payload.substring(0, 100));
        res.status(200).send("Test webhook re√ßu correctement comme Buffer!");
    } else {
        res.status(400).send("Erreur: req.body n'est pas un Buffer!");
    }
});

// Route de test pour l'envoi d'email
router.get("/test-email", async (req, res) => {
    try {
        console.log("üìß Test d'envoi d'email d√©marr√©");
        const nodemailer = require("nodemailer");
        
        // V√©rifiez que les variables d'environnement sont d√©finies
        if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
            throw new Error("Variables EMAIL_USER ou EMAIL_PASS non d√©finies");
        }
        
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS,
            },
            debug: true
        });
        
        // V√©rifier la connexion au service d'email
        await transporter.verify();
        console.log("‚úÖ Connexion au service d'email √©tablie");
        
        // Envoi d'un email simple
        const info = await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: process.env.EMAIL_USER, // Envoi √† soi-m√™me pour le test
            subject: "Test email Tropitech",
            text: "Ceci est un test pour v√©rifier que l'envoi d'email fonctionne correctement.",
            html: "<p>Ceci est un test pour v√©rifier que l'envoi d'email <b>fonctionne correctement</b>.</p>"
        });
        
        console.log("‚úÖ Email de test envoy√©:", info.messageId);
        res.send(`Email de test envoy√© avec succ√®s! ID: ${info.messageId}`);
    } catch (error) {
        console.error("‚ùå Erreur lors du test d'email:", error);
        res.status(500).send(`Erreur de test email: ${error.message}`);
    }
});

// Route de test pour g√©n√©rer un PDF
router.get("/test-pdf", async (req, res) => {
    try {
        console.log("üìÑ Test de g√©n√©ration de PDF d√©marr√©");
        
        // Donn√©es de test
        const name = "Doe";
        const firstName = "John";
        const email = "test@example.com";
        const paymentId = "TEST_" + Date.now();
        const category = "earlyBird";
        
        // G√©n√©rer le PDF
        const ticketData = await generateTicketPDF(
            name,
            firstName,
            email,
            paymentId,
            category
        );
        
        console.log("‚úÖ PDF g√©n√©r√© avec succ√®s:", ticketData);
        
        // V√©rifier que le fichier existe
        if (fs.existsSync(ticketData.filePath)) {
            // Envoyer le PDF au client
            const fileBuffer = fs.readFileSync(ticketData.filePath);
            
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename=test_ticket.pdf`);
            return res.send(fileBuffer);
        } else {
            throw new Error(`Le fichier PDF n'existe pas apr√®s g√©n√©ration: ${ticketData.filePath}`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors du test de g√©n√©ration PDF:", error);
        res.status(500).send(`Erreur de test PDF: ${error.message}`);
    }
});

module.exports = router;