// server/routes/webhookRoutes.js
const express = require("express");
const router = express.Router();
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const User = require("../models/User");
const Ticket = require("../models/ticket");
const { generateTicketPDF } = require("../utils/generateTicket");
const { sendTicketEmail } = require("../utils/emailService");
const fs = require("fs");
const path = require("path");

// V√©rification et cr√©ation des dossiers n√©cessaires
const dirs = [
  path.join(__dirname, '..', 'tickets'),
  path.join(__dirname, '..', 'qrcodes'),
  path.join(__dirname, '..', 'assets')
];

dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`‚úÖ Dossier cr√©√©: ${dir}`);
  }
});

// Cache simple pour les √©v√©nements Stripe trait√©s (stock√© en m√©moire)
// Note: Ce cache sera perdu si le serveur red√©marre
const processedEvents = new Set();

// Middleware pour les webhooks Stripe - utilise le corps brut
router.post("/", express.raw({ type: 'application/json' }), async (req, res) => {
    console.log("üì© Webhook Stripe re√ßu !");
    console.log("Headers:", JSON.stringify(req.headers));
    
    // R√©cup√©rer le corps de la requ√™te en tant que Buffer
    const payload = req.body;
    const sig = req.headers['stripe-signature'];
    let event;

    try {
        // V√©rifier si nous avons le corps et la signature
        if (!payload) {
            console.error("‚ùå Webhook error: Payload vide ou manquant");
            return res.status(400).send("Webhook Error: Missing payload");
        }

        // Log pour le debugging
        console.log(`üì¶ Payload re√ßu (Buffer): ${Buffer.isBuffer(payload)}, Taille: ${payload.length} bytes`);
        console.log(`üîë Signature pr√©sente: ${!!sig}`);
        console.log(`üîí Secret configur√©: ${!!process.env.STRIPE_WEBHOOK_SECRET}`);

        // V√©rifier la signature
        if (process.env.STRIPE_WEBHOOK_SECRET && sig) {
            try {
                event = stripe.webhooks.constructEvent(
                    payload, 
                    sig, 
                    process.env.STRIPE_WEBHOOK_SECRET
                );
                console.log(`‚úÖ Signature Stripe v√©rifi√©e`);
            } catch (signatureError) {
                console.error(`‚ùå Erreur de signature webhook: ${signatureError.message}`);
                return res.status(400).send(`Webhook Signature Error: ${signatureError.message}`);
            }
        } else {
            // En d√©veloppement uniquement, on peut accepter sans signature
            try {
                event = JSON.parse(payload.toString());
                console.log(`‚ö†Ô∏è Webhook sans v√©rification de signature (d√©veloppement uniquement)`);
            } catch (parseError) {
                console.error(`‚ùå Erreur de parsing JSON:`, parseError);
                return res.status(400).send(`Webhook Error: Invalid JSON payload`);
            }
        }

        // NOUVEAU: V√©rification d'idempotence - s'assurer qu'on ne traite pas deux fois le m√™me √©v√©nement
        const eventId = event.id;
        if (processedEvents.has(eventId)) {
            console.log(`‚ö†Ô∏è √âv√©nement ${eventId} d√©j√† trait√© pr√©c√©demment - Ignor√©`);
            return res.status(200).send('Webhook event already processed');
        }
        
        console.log(`‚úÖ Type d'√©v√©nement: ${event.type}`);

        // Traiter l'√©v√©nement selon son type
        if (event.type === 'payment_intent.succeeded') {
            await handlePaymentIntentSucceeded(event.data.object);
            // Ajouter l'ID de l'√©v√©nement √† la liste des √©v√©nements trait√©s
            processedEvents.add(eventId);
            return res.status(200).send('Webhook handled: payment_intent.succeeded');
        } else if (event.type === 'payment_intent.payment_failed') {
            await handlePaymentIntentFailed(event.data.object);
            processedEvents.add(eventId);
            return res.status(200).send('Webhook handled: payment_intent.payment_failed');
        } else {
            console.log(`‚ÑπÔ∏è √âv√©nement non trait√©: ${event.type}`);
            return res.status(200).send(`Webhook received but not handled: ${event.type}`);
        }
    } catch (error) {
        console.error(`‚ùå Erreur webhook: ${error.message}`);
        console.error(error.stack);
        // Envoyer un 200 pour √©viter que Stripe ne r√©essaie
        return res.status(200).send(`Webhook Error: ${error.message}`);
    }
});

/**
 * Gestion d'un paiement r√©ussi avec journalisation d√©taill√©e
 * @param {Object} paymentIntent - Objet PaymentIntent de Stripe
 */
async function handlePaymentIntentSucceeded(paymentIntent) {
    console.log(`‚úÖ Paiement r√©ussi! ID: ${paymentIntent.id}`);
    console.log(`üìù Flux d'ex√©cution d√©but: ${new Date().toISOString()}`);

    try {
        // V√©rifier si un ticket existe d√©j√† - V√âRIFICATION RENFORC√âE
        console.log(`üîç V√©rification rigoureuse si un ticket existe d√©j√†...`);
        const existingTicket = await Ticket.findOne({ paymentId: paymentIntent.id });
        
        if (existingTicket) {
            console.log(`‚ÑπÔ∏è Ticket d√©j√† existant pour: ${paymentIntent.id} - ARR√äT DU TRAITEMENT`);
            return; // Sortir imm√©diatement si un ticket existe d√©j√†
        }

        // R√©cup√©rer l'utilisateur
        console.log(`üîç Recherche de l'utilisateur pour paymentId: ${paymentIntent.id}`);
        let user = await User.findOne({ paymentId: paymentIntent.id });

        // Si aucun utilisateur n'est trouv√©, essayer de le cr√©er √† partir des m√©tadonn√©es
        if (!user && paymentIntent.metadata) {
            console.log(`‚ö†Ô∏è Aucun utilisateur trouv√© pour paymentId=${paymentIntent.id}. Tentative de r√©cup√©ration depuis les m√©tadonn√©es...`);
            console.log(`üìã M√©tadonn√©es disponibles:`, paymentIntent.metadata);
            
            const { customer_name, customer_firstName, customer_email } = paymentIntent.metadata;
            
            if (customer_email) {
                console.log(`üìù Cr√©ation d'un nouvel utilisateur √† partir des m√©tadonn√©es...`);
                user = new User({
                    email: customer_email || paymentIntent.receipt_email || "no-email@example.com",
                    name: customer_name || "Utilisateur",
                    firstName: customer_firstName || "Anonyme",
                    paymentId: paymentIntent.id,
                    imageConsent: true // Par d√©faut
                });
                
                await user.save();
                console.log(`‚úÖ Utilisateur cr√©√© depuis les m√©tadonn√©es: ${user.email}`);
            } else {
                console.log(`‚ö†Ô∏è Impossible de cr√©er l'utilisateur: m√©tadonn√©es insuffisantes`);
                // Debug: afficher toutes les m√©tadonn√©es disponibles
                console.log('M√©tadonn√©es Stripe disponibles:', JSON.stringify(paymentIntent));
                return;
            }
        } else if (user) {
            console.log(`‚úÖ Utilisateur trouv√©: ${user.email}`);
        } else {
            console.error(`‚ùå Utilisateur non trouv√© pour le paiement: ${paymentIntent.id}`);
            return;
        }

        // Ajout d'une v√©rification suppl√©mentaire JUSTE AVANT de cr√©er le ticket
        const doubleCheck = await Ticket.findOne({ paymentId: paymentIntent.id });
        if (doubleCheck) {
            console.log(`‚ö†Ô∏è Un ticket a √©t√© cr√©√© entre-temps! Arr√™t du traitement pour √©viter les doublons.`);
            return;
        }

        // D√©terminer la cat√©gorie en fonction du nombre de tickets vendus
        console.log(`üî¢ Calcul de la cat√©gorie...`);
        const ticketCount = await Ticket.countDocuments();
        let category = "thirdRelease"; // Par d√©faut
        
        if (ticketCount < 30) {
            category = "earlyBird";
        } else if (ticketCount < 90) {
            category = "secondRelease";
        }

        console.log(`‚úÖ Cat√©gorie d√©termin√©e: ${category} (${ticketCount} tickets vendus)`);

        // Cr√©er le nouveau ticket en BDD
        console.log(`üìù Cr√©ation du ticket pour ${user.email} avec cat√©gorie ${category}`);
        const ticket = new Ticket({
            paymentId: paymentIntent.id,
            email: user.email,
            name: user.name,
            firstName: user.firstName,
            category,
            imageConsent: user.imageConsent,
            emailSent: false,  // Par d√©faut, l'email n'est pas encore envoy√©
            emailAttempts: 0   // Compteur de tentatives d'envoi
        });
        
        await ticket.save();
        console.log(`‚úÖ Ticket cr√©√© en base pour: ${user.email} (ID: ${ticket._id})`);

        // G√©n√©ration du PDF avec QR Code
        try {
            console.log(`üîÑ G√©n√©ration du PDF en cours...`);
            const ticketData = await generateTicketPDF(
                user.name,
                user.firstName,
                user.email,
                paymentIntent.id,
                category
            );
            
            console.log(`‚úÖ PDF g√©n√©r√© avec succ√®s: ${ticketData.filePath}`);
            
            // Mettre √† jour le ticket avec le chemin du PDF
            await Ticket.findByIdAndUpdate(ticket._id, {
                pdfPath: ticketData.filePath
            });
            
            // V√©rifier que le fichier existe
            if (fs.existsSync(ticketData.filePath)) {
                console.log(`‚úÖ Fichier PDF v√©rifi√©: ${ticketData.filePath} (${fs.statSync(ticketData.filePath).size} bytes)`);
                
                // Envoyer l'email avec le billet
                console.log(`üìß Envoi de l'email √† ${user.email}...`);
                const emailResult = await sendTicketEmail(
                    user.email,
                    user.name,
                    user.firstName,
                    ticketData
                );
                
                // Mettre √† jour le statut d'envoi dans le ticket
                await Ticket.findByIdAndUpdate(ticket._id, {
                    emailSent: true,
                    emailSentAt: new Date(),
                    emailAttempts: 1,
                    emailMessageId: emailResult.messageId || 'undefined'
                });
                
                console.log(`‚úÖ Email envoy√© √†: ${user.email}`, emailResult ? `(ID: ${emailResult.messageId})` : '');
            } else {
                throw new Error(`Le fichier PDF n'existe pas apr√®s g√©n√©ration: ${ticketData.filePath}`);
            }
        } catch (error) {
            console.error(`‚ùå Erreur g√©n√©ration/envoi du ticket: ${error.message}`);
            console.error(error.stack);
            
            // Mettre √† jour le ticket pour indiquer l'√©chec
            await Ticket.findByIdAndUpdate(ticket._id, {
                emailAttempts: 1,
                emailError: error.message
            });
        }
        
        console.log(`üìù Flux d'ex√©cution termin√©: ${new Date().toISOString()}`);
    } catch (error) {
        console.error(`‚ùå Erreur traitement paiement r√©ussi: ${error.message}`);
        console.error(error.stack);
    }
}

/**
 * Gestion d'un paiement √©chou√©
 * @param {Object} paymentIntent - Objet PaymentIntent de Stripe
 */
async function handlePaymentIntentFailed(paymentIntent) {
    console.log(`‚ö†Ô∏è Paiement √©chou√©! ID: ${paymentIntent.id}`);

    try {
        const user = await User.findOne({ paymentId: paymentIntent.id });
        if (!user) {
            console.error(`‚ùå Utilisateur non trouv√© pour le paiement √©chou√©: ${paymentIntent.id}`);
            return;
        }
        
        console.log(`‚ÑπÔ∏è Paiement √©chou√© pour: ${user.email}`);
        // Vous pourriez envoyer un email d'√©chec ici si n√©cessaire
    } catch (error) {
        console.error(`‚ùå Erreur traitement paiement √©chou√©: ${error.message}`);
        console.error(error.stack);
    }
}

// Nettoyage p√©riodique des √©v√©nements trait√©s pour √©viter une fuite de m√©moire
// Conserver uniquement les 1000 √©v√©nements les plus r√©cents
setInterval(() => {
    if (processedEvents.size > 1000) {
        const eventsArray = Array.from(processedEvents);
        const eventsToRemove = eventsArray.slice(0, eventsArray.length - 1000);
        eventsToRemove.forEach(eventId => processedEvents.delete(eventId));
        console.log(`üßπ Nettoyage du cache d'√©v√©nements: ${eventsToRemove.length} √©v√©nements anciens supprim√©s`);
    }
}, 24 * 60 * 60 * 1000); // Nettoyer une fois par jour

// Exporter le routeur
module.exports = router;