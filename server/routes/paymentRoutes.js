// server/routes/paymentRoutes.js
require("dotenv").config();

// Affiche la cl√© Stripe utilis√©e
console.log("üîç Cl√© Stripe utilis√©e :", process.env.STRIPE_SECRET_KEY);

const express = require("express");
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const QRCode = require("qrcode");
const User = require("../models/User");
const Ticket = require("../models/ticket");
const { sendTicketEmail } = require("../utils/emailService");
const { generateTicketPDF } = require("../utils/generateTicket");
const fs = require("fs");
const path = require("path");

const router = express.Router();

console.log("‚úÖ paymentRoutes charg√©");

// V√©rifier que les dossiers n√©cessaires existent
const dirs = [
  path.join(__dirname, '..', 'tickets'),
  path.join(__dirname, '..', 'qrcodes')
];

dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`‚úÖ Dossier cr√©√©: ${dir}`);
  }
});

// ----------------------------------------------------
// Route GET de test
// ----------------------------------------------------
router.get("/", (req, res) => {
  console.log("‚úÖ GET /api/payment");
  res.send("‚úÖ API Stripe Payment OK");
});

// Route de test pour l'envoi d'email
router.get("/test-email", async (req, res) => {
  try {
    console.log("üìß Test d'envoi d'email d√©marr√©");
    const nodemailer = require("nodemailer");
    
    // V√©rifiez que les variables d'environnement sont d√©finies
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      throw new Error("Variables EMAIL_USER ou EMAIL_PASS non d√©finies");
    }
    
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
      debug: true
    });
    
    // V√©rifier la connexion au service d'email
    await transporter.verify();
    console.log("‚úÖ Connexion au service d'email √©tablie");
    
    // Envoi d'un email simple
    const info = await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_USER, // Envoi √† soi-m√™me pour le test
      subject: "Test email Tropitech",
      text: "Ceci est un test pour v√©rifier que l'envoi d'email fonctionne correctement.",
      html: "<p>Ceci est un test pour v√©rifier que l'envoi d'email <b>fonctionne correctement</b>.</p>"
    });
    
    console.log("‚úÖ Email de test envoy√©:", info.messageId);
    res.send(`Email de test envoy√© avec succ√®s! ID: ${info.messageId}`);
  } catch (error) {
    console.error("‚ùå Erreur lors du test d'email:", error);
    res.status(500).send(`Erreur de test email: ${error.message}`);
  }
});

// ----------------------------------------------------
// ROUTE : POST /create-payment
// Cr√©e un PaymentIntent + enregistre un utilisateur en BDD
// ----------------------------------------------------
router.post("/create-payment", async (req, res) => {
  try {
    console.log("‚úÖ POST /api/payment/create-payment appel√© !");
    console.log("Body re√ßu:", req.body);

    const { amount, email, name, firstName, imageConsent } = req.body;

    // V√©rification de base
    if (!imageConsent) {
      console.log("‚ùå L'utilisateur n'a pas coch√© le droit √† l'image.");
      return res.status(400).json({ error: "Vous devez accepter le droit √† l'image" });
    }

    // 1) Cr√©er le PaymentIntent sur Stripe
    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency: "chf",
      receipt_email: email,
    });
    console.log("‚úÖ PaymentIntent cr√©√© :", paymentIntent.id);

    // 2) Cr√©er l'utilisateur associ√© (pour rattacher le paymentId)
    const user = new User({
      email,
      name,
      firstName,
      paymentId: paymentIntent.id,
      imageConsent,
    });

    // Sauvegarde en base
    await user.save();
    console.log("‚úÖ Utilisateur sauvegard√© en base avec paymentId:", paymentIntent.id);

    // 3) R√©pondre au front-end avec le client_secret pour finaliser le paiement
    return res.json({ clientSecret: paymentIntent.client_secret });
  } catch (error) {
    console.error("‚ùå Erreur cr√©ation paiement:", error);
    return res.status(500).json({ error: "Erreur lors de la cr√©ation du paiement" });
  }
});

// ----------------------------------------------------
// ROUTE : POST /webhook
// Stripe envoie les √©v√©nements (payment_intent.succeeded, etc.)
// ----------------------------------------------------
// IMPORTANT: Cette route doit √™tre d√©finie AVANT express.json() middleware dans server.js
router.post("/webhook", express.raw({ type: "application/json" }), async (req, res) => {
  console.log("üì© Webhook Stripe re√ßu !");

  try {
    // R√©cup√©rer le corps de la requ√™te en tant que Buffer
    const payload = req.body;
    const sig = req.headers['stripe-signature'];
    let event;

    // V√©rifier la signature si un secret est configur√©
    if (process.env.STRIPE_WEBHOOK_SECRET && sig) {
      try {
        event = stripe.webhooks.constructEvent(
          payload, 
          sig, 
          process.env.STRIPE_WEBHOOK_SECRET
        );
        console.log(`‚úÖ Signature Stripe v√©rifi√©e`);
      } catch (signatureError) {
        console.error(`‚ùå Erreur de signature webhook: ${signatureError.message}`);
        return res.status(400).send(`Webhook Signature Error: ${signatureError.message}`);
      }
    } else {
      // Sinon, juste parser le JSON (moins s√©curis√©, √† utiliser uniquement en d√©veloppement)
      try {
        event = JSON.parse(payload.toString());
        console.log(`‚ö†Ô∏è Webhook sans v√©rification de signature (d√©veloppement uniquement)`);
      } catch (parseError) {
        console.error(`‚ùå Erreur de parsing du payload: ${parseError.message}`);
        return res.status(400).send(`Webhook Parsing Error: ${parseError.message}`);
      }
    }

    console.log(`‚úÖ Type d'√©v√©nement: ${event.type}`);

    // Traitement de l'√©v√©nement payment_intent.succeeded
    if (event.type === "payment_intent.succeeded") {
      await handlePaymentIntentSucceeded(event.data.object);
      return res.status(200).send('Webhook handled: payment_intent.succeeded');
    } 
    // Traitement de l'√©v√©nement payment_intent.payment_failed
    else if (event.type === "payment_intent.payment_failed") {
      await handlePaymentIntentFailed(event.data.object);
      return res.status(200).send('Webhook handled: payment_intent.payment_failed');
    } 
    // Autres √©v√©nements
    else {
      console.log(`‚ÑπÔ∏è √âv√©nement non trait√©: ${event.type}`);
      return res.status(200).send(`Webhook received: ${event.type}`);
    }
  } catch (error) {
    console.error(`‚ùå Erreur globale webhook: ${error.message}`);
    console.error(error.stack);
    return res.status(500).send(`Webhook Error: ${error.message}`);
  }
});

/**
 * Gestion d'un paiement r√©ussi
 * @param {Object} paymentIntent - Objet PaymentIntent de Stripe
 */
async function handlePaymentIntentSucceeded(paymentIntent) {
  console.log(`‚úÖ Paiement r√©ussi! ID: ${paymentIntent.id}`);

  try {
    // V√©rifier si un ticket existe d√©j√†
    const existingTicket = await Ticket.findOne({ paymentId: paymentIntent.id });
    if (existingTicket) {
      console.log(`‚ÑπÔ∏è Un ticket existe d√©j√† pour ce paiement: ${paymentIntent.id}`);
      return;
    }

    // Retrouver l'utilisateur en base
    let user = await User.findOne({ paymentId: paymentIntent.id });
    
    // Si aucun utilisateur n'est trouv√©, cr√©er un utilisateur test pour le d√©veloppement
    if (!user) {
      console.log(`‚ö†Ô∏è Aucun utilisateur trouv√© pour le paymentId=${paymentIntent.id}. Cr√©ation d'un utilisateur de test...`);
      
      user = new User({
        email: paymentIntent.receipt_email || "test@example.com",
        name: "Test",
        firstName: "User",
        paymentId: paymentIntent.id,
        imageConsent: true
      });
      
      await user.save();
      console.log(`‚úÖ Utilisateur de test cr√©√©: ${user.email}`);
    } else {
      console.log(`‚úÖ Utilisateur trouv√©: ${user.email}`);
    }

    // D√©terminer la cat√©gorie en fonction du nombre de tickets vendus
    const ticketCount = await Ticket.countDocuments();
    let category = "thirdRelease"; // Par d√©faut
    
    if (ticketCount < 30) {
      category = "earlyBird";
    } else if (ticketCount < 90) {
      category = "secondRelease";
    }

    // Cr√©er le nouveau ticket en BDD
    const newTicket = new Ticket({
      paymentId: paymentIntent.id,
      email: user.email,
      name: user.name,
      firstName: user.firstName,
      category,
      imageConsent: user.imageConsent
    });
    
    await newTicket.save();
    console.log(`‚úÖ Ticket cr√©√© en base pour: ${user.email}`);

    try {
      // G√©n√©rer le PDF du billet
      console.log(`üìÑ D√©but g√©n√©ration PDF pour ${user.email}...`);
      const ticketData = await generateTicketPDF(
        user.name,
        user.firstName,
        user.email,
        paymentIntent.id,
        category
      );
      
      console.log(`‚úÖ PDF g√©n√©r√© avec succ√®s: ${ticketData.filePath}`);
      
      // Envoi de l'email
      console.log(`üìß D√©but envoi email √† ${user.email}...`);
      await sendTicketEmail(
        user.email,
        user.name,
        user.firstName,
        ticketData
      );
      
      console.log(`‚úÖ Email envoy√© avec succ√®s √† ${user.email}`);
    } catch (emailError) {
      console.error(`‚ùå Erreur lors de la g√©n√©ration/envoi de l'email:`, emailError);
      console.error(emailError.stack);
      // Ne pas faire √©chouer tout le processus, le ticket est d√©j√† cr√©√©
    }
  } catch (error) {
    console.error(`‚ùå Erreur traitement paiement r√©ussi:`, error);
    console.error(error.stack);
    throw error; // Propager l'erreur pour le traitement global
  }
}

/**
 * Gestion d'un paiement √©chou√©
 * @param {Object} paymentIntent - Objet PaymentIntent de Stripe
 */
async function handlePaymentIntentFailed(paymentIntent) {
  console.log(`‚ö†Ô∏è Paiement √©chou√©! ID: ${paymentIntent.id}`);

  try {
    const user = await User.findOne({ paymentId: paymentIntent.id });
    if (!user) {
      console.error(`‚ùå Utilisateur non trouv√© pour le paiement √©chou√©: ${paymentIntent.id}`);
      return;
    }
    
    console.log(`‚ÑπÔ∏è Paiement √©chou√© pour: ${user.email}`);
    // Vous pourriez envoyer un email d'√©chec ici si n√©cessaire
  } catch (error) {
    console.error(`‚ùå Erreur traitement paiement √©chou√©:`, error);
    console.error(error.stack);
    throw error; // Propager l'erreur pour le traitement global
  }
}

module.exports = router;