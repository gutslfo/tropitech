
services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: tropitech-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
<<<<<<< HEAD
      - tropitech-network
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:5000
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: tropitech-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    networks:
      - tropitech-network
    env_file:
      - .env
=======
      - npm-network
    env_file:
      - path: .env
>>>>>>> 4365d5df70c64ad601569d3b13e37ce72aed8076
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/tropitech
      - PORT=5000
      - FRONTEND_URL=http://frontend:3000
      - CORS_ORIGIN=http://frontend:3000
    volumes:
      - tickets:/app/server/tickets
      - qrcodes:/app/server/qrcodes
      - assets:/app/server/assets
    depends_on:
      mongo:
        condition: service_healthy

  mongo:
    image: mongo:6
    container_name: tropitech-mongo
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
    networks:
      - tropitech-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "27017:27017"
    networks:
      - npm-network

networks:
  tropitech-network:
    driver: bridge

volumes:
  tickets:
  qrcodes:
  assets:
  mongo-data: